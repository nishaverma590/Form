{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","initialValues","username","email","password","_useState","useState","_useState2","_slicedToArray","formValues","setFormValues","_useState3","_useState4","formErrors","setFormErrors","_useState5","_useState6","isSubmit","setIsSubmit","handleChange","e","_e$target","target","name","value","_objectSpread","_defineProperty","useEffect","console","log","Object","keys","length","validate","values","errors","test","_jsxs","className","children","_jsx","JSON","stringify","undefined","onSubmit","preventDefault","type","placeholder","onChange","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5c68832.chunk.js","sourcesContent":["\r\nimport { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n//\r\nfunction App() {\r\n  const initialValues = { username: \"\", email: \"\", password: \"\" };\r\n  const [formValues, setFormValues] = useState(initialValues);\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormValues({ ...formValues, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setFormErrors(validate(formValues));\r\n    setIsSubmit(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(formErrors);\r\n    if (Object.keys(formErrors).length === 0 && isSubmit) {\r\n      console.log(formValues);\r\n      // Perform any necessary actions (e.g., API call) here\r\n      console.log(\"Form submitted:\", formValues);\r\n\r\n    // Display success message and clear form fields\r\n    setFormValues(initialValues);\r\n    setIsSubmit(false);\r\n      \r\n    }\r\n  }, [formErrors]);// using form vaildation condition\r\n  const validate = (values) => {\r\n    const errors = {};\r\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\r\n    if (!values.username) {\r\n      errors.username = \"Username is required!\";\r\n    }\r\n    if (!values.email) {\r\n      errors.email = \"Email is required!\";\r\n    } else if (!regex.test(values.email)) {\r\n      errors.email = \"This is not a valid email format!\";\r\n    }\r\n    if (!values.password) {\r\n      errors.password = \"Password is required\";\r\n    } else if (values.password.length < 4) {\r\n      errors.password = \"Password must be more than 4 characters\";\r\n    } else if (values.password.length > 10) {\r\n      errors.password = \"Password cannot exceed more than 10 characters\";\r\n    }\r\n    return errors;\r\n  };\r\n  //display the form user interface.\r\n  return (\r\n    <div className=\"container\">\r\n      {Object.keys(formErrors).length === 0 && isSubmit ? (\r\n        <div className=\"ui message success\"> successfully registered</div>\r\n      ) : (\r\n        <pre>{JSON.stringify(formValues, undefined, 2)}</pre>\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <h1>Registration Form</h1>\r\n        <div className=\"ui divider\"></div>\r\n        <div className=\"ui form\">\r\n          <div className=\"field\">\r\n            <label>Username</label><br></br>\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              placeholder=\"Username\"\r\n              value={formValues.username}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <p>{formErrors.username}</p>\r\n          <div className=\"field\">\r\n            <label>Email</label><br></br>\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              placeholder=\"Email\"\r\n              value={formValues.email}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <p>{formErrors.email}</p>\r\n          <div className=\"field\">\r\n            <label>Password</label><br></br>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              value={formValues.password}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <p>{formErrors.password}</p>\r\n          <button className=\"fluid ui button blue\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}